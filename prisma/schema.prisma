// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  email     String    @unique
  password  String
  role      String    @default("VIEWER")
  avatar    Document?
}

model Doctor {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  cpf           String?        @unique
  crm           String?        @unique
  phone         String?
  email         String?
  services      Service[]
  consultations Consultation[]
  appointments  Appointment[]
}

model Service {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String?
  description  String?
  price        Float?
  duration     Int
  doctors      Doctor[]
  appointment  Appointment[]
  consultation Consultation[]
}

model Patient {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  cpf           String?
  birth         DateTime?
  phone         String?
  email         String?
  address       String?
  consultations Consultation[]
  appointments  Appointment[]
}

model Appointment {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dateTime     DateTime
  status       String        @default("SCHEDULED")
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  doctorId     Int
  patient      Patient       @relation(fields: [patientId], references: [id])
  patientId    Int
  service      Service       @relation(fields: [serviceId], references: [id])
  serviceId    Int
  consultation Consultation?
}

model Consultation {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  initialDateTime DateTime
  finalDateTime   DateTime?
  description     String?
  doctor          Doctor       @relation(fields: [doctorId], references: [id])
  doctorId        Int
  patient         Patient      @relation(fields: [patientId], references: [id])
  patientId       Int
  service         Service      @relation(fields: [serviceId], references: [id])
  serviceId       Int
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId   Int?         @unique
  attachments     Document[]
}

model Document {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  url            String
  type           String
  user           User?         @relation(fields: [userId], references: [id])
  userId         Int?          @unique
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId Int?
}
